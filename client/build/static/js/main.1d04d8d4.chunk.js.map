{"version":3,"sources":["components/Nav/index.js","utils/API.js","components/Jumbotron/index.js","components/SearchForm/index.js","components/Grid/index.js","components/BookResults/index.js","pages/Books.js","components/SavedBooks/index.js","pages/SaveBook.js","pages/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","id","type","queryString","axios","get","savedBooks","post","delete","Jumbotron","children","SearchForm","props","value","search","name","placeholder","onChange","handleInputChange","onClick","handleFormSubmit","Container","fluid","Row","Col","size","split","map","join","BookResults","books","length","book","title","key","_id","src","image","alt","author","description","event","handleSavedButton","link","target","Books","state","error","message","setState","preventDefault","API","then","res","data","items","volumeInfo","authors","volumInfo","imageLinks","thumbnail","infoLink","catch","err","booksSaved","filter","bookSaved","alert","console","log","this","Component","SavedBooks","savedBook","handleDeleteButton","SaveBooks","loadBooks","NoMatch","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d04d8d4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Nav() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"/\">\n                <h3 className=\"text-white\">Google Book Search</h3>\n            </a>\n            <div id=\"nav-bar\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\" id=\"home\">\n                        <a className=\"nav-link\" href=\"/\">\n                            <button type=\"button\" className=\"btn btn-info text-white\">\n                                Search Books\n                            </button>\n                        </a>\n                    </li>\n                    <li className=\"nav-item\" id=\"saved\">\n                        <a className=\"nav-link\" href=\"/saved\">\n                            <button type=\"button\" className=\"btn btn-danger text-white\">\n                                Saved Books\n                            </button>\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default Nav;","import axios from \"axios\";\n\nexport default {\n    // Get books from Google Books api\n    getGoogleSearchBooks: function (queryString) {\n        return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + queryString);\n    },\n    // Get all books\n    getBooks: function () {\n        return axios.get(\"/api/books\");\n    },\n    // Get books with an id\n    getBook: function (id) {\n        return axios.get(\"/api/books/\" + id);\n    },\n    // Save a book\n    saveBook: function (savedBooks) {\n        return axios.post(\"/api/books\", savedBooks);\n    },\n    // Delete a book from id\n    deleteBook: function (id) {\n        return axios.delete(\"/api/books/\" + id);\n    }\n};","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n    return (\n        <div className=\"jumbotron jumbotron-fluid d-flex align-items-center\">\n            <div className=\"container text-center\">{children}</div>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nconst SearchForm = props => {\n    return (\n        <form>\n            <div className=\"form-group\">\n                <label className=\"SearchLabel\">\n                    <h4>Search For Book</h4>\n                </label>\n                <input className=\"col form-control\" value={props.search} type=\"text\" name=\"searchBook\" placeholder=\"Enter Book's Name\" onChange={props.handleInputChange} />\n            </div>\n            <button type=\"submit\" className=\"submitButton btn btn-primary\" onClick={props.handleFormSubmit}>Submit</button>\n        </form>\n    )\n}\n\nexport default SearchForm;","import React from \"react\";\n\n// allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n    return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// allows us to use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n    return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// allows us to size bootstrap columns with less syntax\nexport function Col({ size, children }) {\n    return (\n        <div className={size.split(\" \").map(size => \"col-\" + size).join(\" \")}>{children}</div>\n    );\n}","import React from \"react\";\nimport { Row, Col } from \"../Grid\";\n\nconst BookResults = props => {\n    return props.books.length === 0 ? (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <div className=\"article\">\n                    <h3>Results</h3>\n                </div>\n            </div>\n        </div>\n    ) : (\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <div className=\"article\">\n                        <h3>Results</h3>\n                        {props.book.map(book => {\n                            return (\n                                <li className=\"list-group-item\">\n                                    <Row className=\"result row\" id={book.title + \"card\"} key={book._id}>\n                                        <Col size=\"2\" className=\"image\">\n                                            <img src={book.image} alt={book.title} />\n                                        </Col>\n                                        <Col size=\"1\" className=\"empty\" />\n                                        <Col size=\"9\" className=\"books\">\n                                            <Row>\n                                                <h4>{book.title}</h4>\n                                            </Row>\n                                            <Row>\n                                                <h4>{book.author}</h4>\n                                            </Row>\n                                            <Row>\n                                                <p>{book.description}</p>\n                                            </Row>\n                                        </Col>\n                                    </Row>\n                                    <br />\n                                    <Row className=\"button\">\n                                        <button className=\"btn btn-primary\" id={book.id} onClick={event => props.handleSavedButton(event)}>Save Book</button>\n                                        <a href={book.link} target=\"_blank\">\n                                            <button className=\"btn btn-success\">View Book</button>\n                                        </a>\n                                    </Row>\n                                </li>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n}\n\nexport default BookResults;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport SearchForm from \"../components/SearchForm\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport BookResults from \"../components/BookResults\";\n\nclass Books extends Component {\n    state = {\n        search: \"\",\n        error: \"\",\n        message: \"\",\n        books: []\n    };\n\n    handleInputChange = event => {\n        this.setState({ search: event.target.value });\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        API.getGoogleSearchBooks(this.state.search)\n            .then(res => {\n                let books = res.data.items;\n                books = books.map(book => {\n                    book = {\n                        key: book.id,\n                        id: book.id,\n                        title: book.volumeInfo.title,\n                        author: book.volumeInfo.authors,\n                        description: book.volumInfo.description,\n                        image: book.volumeInfo.imageLinks.thumbnail,\n                        link: book.volumeInfo.infoLink\n                    };\n                    return book;\n                })\n                this.setState({ books: books, error: \"\" });\n            }).catch(err => this.setState({ error: err.items }));\n    }\n\n    handleSavedButton = event => {\n        event.preventDefault();\n        let booksSaved = this.state.book.filter(bookSaved => bookSaved.id === event.target.id);\n        booksSaved = booksSaved[0];\n        API.saveBook(booksSaved).then(this.setState({ message: alert(\"This book has been saved\") })).catch(err => console.log(err));\n    }\n\n    render() {\n        return (\n            <Container fluid={true}>\n                <Jumbotron>\n                    <h1>Google Book Search</h1>\n                </Jumbotron>\n                <Container>\n                    <Row>\n                        <Col size=\"12\">\n                            <SearchForm handleFormSubmit={this.handleFormSubmit} handleInputChange={this.handleInputChange} />\n                        </Col>\n                    </Row>\n                </Container>\n                <br />\n                <Container>\n                    <BookResults books={this.state.books} handleSavedButton={this.handleSavedButton} />\n                </Container>\n            </Container>\n\n        )\n    }\n\n\n}\n\nexport default Books;","import React from \"react\";\nimport { Row, Col } from \"../Grid\";\n\nconst SavedBooks = props => {\n    return props.booksSaved.length === 0 ? (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <div>\n                    <h3>Books Saved</h3>\n                </div>\n            </div>\n        </div>\n    ) : (\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <div>\n                        <h3>Books Saved</h3>\n                        {props.booksSaved.map(savedBook => {\n                            return (\n                                <li className=\"list-group-item\">\n                                    <Row id={savedBook.title + \"Card\"} key={savedBook._id}>\n                                        <Col size=\"2\">\n                                            <img src={savedBook.image} alt={savedBook.title} />\n                                        </Col>\n                                        <Col size=\"1\" />\n                                        <Col size=\"9\">\n                                            <Row>\n                                                <h1>{savedBook.title}</h1>\n                                            </Row>\n                                            <Row>\n                                                <h2>{savedBook.authors}</h2>\n                                            </Row>\n                                            <Row>\n                                                <h4>{savedBook.description}</h4>\n                                            </Row>\n                                        </Col>\n                                    </Row>\n                                    <br />\n                                    <Row>\n                                        <button className=\"btn btn-danger\" id={savedBook._id} onClick={() => props.handleDeleteButton(savedBook._id)}>Delete Book</button>\n                                        <a href={savedBook.link} target=\"_blank\">\n                                            <button className=\"btn btn-success\">View Book</button>\n                                        </a>\n                                    </Row>\n                                </li>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n}\n\nexport default SavedBooks;","import React, { Component } from \"react\";\nimport SavedBooks from \"../components/SavedBooks\";\nimport API from \"../utils/API\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { Container } from \"../components/Grid\";\n\nclass SaveBooks extends Component {\n    state = {\n        booksSaved: []\n    }\n\n    componentDidMount() {\n        this.loadBooks();\n    }\n\n    loadBooks = () => {\n        API.getBooks()\n            .then(res =>\n                this.setState({ books: res.data })\n            )\n            .catch(err => console.log(err));\n    }\n\n    handleDeleteButton = id => {\n        API.deleteBook(id).then(res => this.loadBooks())\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Jumbotron />\n                <Container>\n                    <SavedBooks booksSaved={this.state.booksSaved} handleDeleteButton={this.handleDeleteButton} />\n                </Container>\n            </Container>\n\n        )\n    }\n};\n\nexport default SaveBooks;","import React from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nfunction NoMatch() {\n    return (\n        <Container fluid>\n            <Row>\n                <Col size=\"md-12\">\n                    <Jumbotron>\n                        <h1 className=\"text-white\">404 Page Not Found</h1>\n                    </Jumbotron>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default NoMatch;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Nav from \"./components/Nav\";\nimport Books from \"./pages/Books\";\nimport SavedBooks from \"./pages/SaveBook\";\nimport NoMatch from \"./pages/NoMatch\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Books} />\n          <Route exact path=\"/saved\" component={SavedBooks} />\n          <Route exact path=\"/saved/:id\" component={SavedBooks} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}